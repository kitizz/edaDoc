<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="editorbase_8cpp" kind="file">
    <compoundname>editorbase.cpp</compoundname>
    <includes refid="editorbase_8h" local="yes">editorbase.h</includes>
    <includes refid="utileda_8h" local="yes">utileda.h</includes>
    <includes local="no">QDebug</includes>
    <includes local="no">QBitmap</includes>
    <includes local="no">QCursor</includes>
    <incdepgraph>
      <node id="269">
        <label>QMap</label>
      </node>
      <node id="276">
        <label>limits</label>
      </node>
      <node id="278">
        <label>editortool.h</label>
        <link refid="editortool_8h_source"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="271">
        <label>services/apiservice.h</label>
        <link refid="apiservice_8h_source"/>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="253">
        <label>common/varianthashlist.h</label>
        <link refid="varianthashlist_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
      </node>
      <node id="254">
        <label>QObject</label>
      </node>
      <node id="268">
        <label>apiobject.h</label>
        <link refid="apiobject_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
      </node>
      <node id="267">
        <label>QPointF</label>
      </node>
      <node id="251">
        <label>editorbase.h</label>
        <link refid="editorbase_8h_source"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>/Users/kitham/projects/qt/eda/src/editorbase.cpp</label>
        <link refid="editorbase.cpp"/>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
      </node>
      <node id="275">
        <label>QPoint</label>
      </node>
      <node id="265">
        <label>shapebase.h</label>
        <link refid="shapebase_8h_source"/>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="277">
        <label>QQmlEngine</label>
      </node>
      <node id="257">
        <label>editorcanvas.h</label>
        <link refid="editorcanvas_8h_source"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>QQuickPaintedItem</label>
      </node>
      <node id="262">
        <label>QMutex</label>
      </node>
      <node id="258">
        <label>QPainter</label>
      </node>
      <node id="280">
        <label>QBitmap</label>
      </node>
      <node id="261">
        <label>configeda.h</label>
        <link refid="configeda_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
      </node>
      <node id="273">
        <label>../apientry.h</label>
        <link refid="apientry_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
      </node>
      <node id="264">
        <label>QDebug</label>
      </node>
      <node id="281">
        <label>QCursor</label>
      </node>
      <node id="279">
        <label>mouseevent.h</label>
        <link refid="mouseevent_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>utileda.h</label>
        <link refid="utileda_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>QMetaMethod</label>
      </node>
      <node id="260">
        <label>QPainterPath</label>
      </node>
      <node id="252">
        <label>QQuickItem</label>
      </node>
      <node id="255">
        <label>QHash</label>
      </node>
      <node id="256">
        <label>QVariant</label>
      </node>
      <node id="266">
        <label>point.h</label>
        <link refid="point_8h_source"/>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>snapping/snapping.h</label>
        <link refid="snapping_8h_source"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
      </node>
      <node id="272">
        <label>service.h</label>
        <link refid="service_8h_source"/>
        <childnode refid="252" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;editorbase.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utileda.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDebug&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QBitmap&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QCursor&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">EditorBase::EditorBase(QQuickItem<sp/>*parent)<sp/>:<sp/>QQuickItem(parent),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>m_zoom(1),</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>m_canvas(0),</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>m_config(0),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>m_util(0),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastSnap(<ref refid="class_snap_result" kindref="compound">SnapResult</ref>(QPointF())),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentSnap(<ref refid="class_snap_result" kindref="compound">SnapResult</ref>(QPointF())),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hint(QUrl()),</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeShape(0),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeTool(0),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_origin(QPointF()),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>m_unitScale(1),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_workspaceSize(QSize()),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>m_totalSize(QSize()),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>m_borderSize(0),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>m_snapEnabled(true),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouse(QPointF()),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseFrame(QPointF()),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseSnap(QPointF()),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseStart(QPointF()),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseDelta(QPointF()),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseButtons(0),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mousePressed(false),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentLeft(0),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentRight(0),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentTop(0),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentBottom(0),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentCenter(QPointF()),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>m_topLayer(0),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hudLayer(0),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeHandle(0),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shapeAtMouse(0),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorHot(QPoint(-1,-1))</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shapes.clear();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>m_selected.clear();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::zoomChanged,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::zoomTest);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(&amp;m_shapes,<sp/>&amp;VariantHashList::listChanged,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::shapeListChanged);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(&amp;m_selected,<sp/>&amp;VariantHashList::listChanged,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::selectedListChanged);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>total<sp/>size<sp/>is<sp/>correctly<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::workspaceSizeChanged,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateTotalSize);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::borderSizeChanged,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateTotalSize);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::widthChanged,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateTotalSize);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::heightChanged,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateTotalSize);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>it<sp/>worth<sp/>condensing<sp/>this<sp/>with<sp/>a<sp/>function?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::viewCenterChanged,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateMouse);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::zoomChanged,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateMouse);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::mouseFrameChanged,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateMouse);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::mouseChanged,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateShapeAtMouse);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>cursor<sp/>when<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorBitmap<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QBitmap(64,32);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMask<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QBitmap(64,32);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorBitmap-&gt;fill();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMask-&gt;fill();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorPainter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QPainter(m_cursorBitmap);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMaskPainter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>QPainter(m_cursorMask);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::activeToolChanged,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateCursor);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::mouseInWorkSpaceChanged,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateCursor);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::hintChanged,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::updateCursorHint);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">qreal<sp/>EditorBase::zoom()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_zoom;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setZoom(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_zoom<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_zoom<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>zoomChanged(arg);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">qreal<sp/>EditorBase::unitScale()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_unitScale;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setUnitScale(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_unitScale<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unitScale<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>unitScaleChanged(arg);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>ShapeList<sp/>is<sp/>a<sp/>list<sp/>containing<sp/>all<sp/>the<sp/>shapes<sp/>in<sp/>this<sp/>editor</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">QVariantList<sp/>EditorBase::shapeList()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shapes.toList();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EditorBase::shapeCount()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="132"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shapes.count();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">QVariant<sp/>EditorBase::shapeAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="136"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shapes.at(index);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1aa3512583ae66ecfe451b86ccdd393a4e" kindref="member">EditorBase::add</ref>(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>added<sp/>=<sp/>m_shapes.<ref refid="class_variant_hash_list_1ac901b9083a56f4c0598202f18057be7f" kindref="member">add</ref>(shapes);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>v,<sp/>added)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(v);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(shape,<sp/>&amp;ShapeBase::activeHandleChanged,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::shapeActiveHandleChanged);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connect(shape,<sp/>&amp;ShapeBase::hasMouseChanged,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::shapeHasMouseChanged);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCanvas();</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1adb68b178afb966ce9e7a66852cfb38aa" kindref="member">EditorBase::remove</ref>(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>list<sp/>=<sp/>util()-&gt;flatten(shapes);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shapes.<ref refid="class_variant_hash_list_1a4d7e3cc22c3fcf3414d02a5eaba2272e" kindref="member">remove</ref>(list);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpShapes(list);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCanvas();</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::removeAll()</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>removed<sp/>=<sp/>m_shapes.toList();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shapes.<ref refid="class_variant_hash_list_1ad3b016990658125586c6198f0da3b843" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpShapes(removed);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCanvas();</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1ab456541bec99aa16c699ca0654cae77c" kindref="member">EditorBase::removeAllExcept</ref>(QVariant<sp/>except)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>removed<sp/>=<sp/>m_shapes.<ref refid="class_variant_hash_list_1ad3b016990658125586c6198f0da3b843" kindref="member">clear</ref>(except,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>cleanUpShapes(removed);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCanvas();</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::cleanUpShapes(QVariantList<sp/>shapes)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>var,<sp/>shapes)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disconnect(shape,<sp/>&amp;ShapeBase::activeHandleChanged,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::shapeActiveHandleChanged);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disconnect(shape,<sp/>&amp;ShapeBase::hasMouseChanged,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;EditorBase::shapeHasMouseChanged);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMetaObject::invokeMethod(shape,<sp/>&quot;destroy&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;deleteLater();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">QVariantList<sp/><ref refid="class_editor_base_1a4ab517a9763439ebed1b31778cbc77e9" kindref="member">EditorBase::selectedList</ref>()</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_selected.toList();</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EditorBase::selectedCount()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="221"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_selected.count();</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">QVariant<sp/>EditorBase::selectedAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="225"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_selected.at(index);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1a05b0667e408e999cacc0b164d5379de5" kindref="member">EditorBase::select</ref>(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Consider<sp/>adding<sp/>a<sp/>check<sp/>that<sp/>the<sp/>shapes<sp/>are<sp/>in<sp/>m_shapes...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_editor_base_1a61353659281e082c4e00e0510b686d10" kindref="member">deselectAllExcept</ref>(shapes);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>selectAdd(shapes);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::selectAdd(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Consider<sp/>adding<sp/>a<sp/>check<sp/>that<sp/>the<sp/>shapes<sp/>are<sp/>in<sp/>m_shapes...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>added<sp/>=<sp/>m_selected.<ref refid="class_variant_hash_list_1ac901b9083a56f4c0598202f18057be7f" kindref="member">add</ref>(shapes);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>need<sp/>to<sp/>update<sp/>the<sp/>selection<sp/>of<sp/>the<sp/>added<sp/>shapes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(QVariant<sp/>var,<sp/>added)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;setSelected(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;setHighlight(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::selectToggle(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>list<sp/>=<sp/>util()-&gt;flatten(shapes);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>notRemoved<sp/>=<sp/>m_selected.<ref refid="class_variant_hash_list_1a4d7e3cc22c3fcf3414d02a5eaba2272e" kindref="member">remove</ref>(list);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>m_selected.<ref refid="class_variant_hash_list_1ac901b9083a56f4c0598202f18057be7f" kindref="member">add</ref>(notRemoved);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>var,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;toggleSelected();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1a947d0a6babe6ebfabfc650cd28fc25bb" kindref="member">EditorBase::deselect</ref>(QVariant<sp/>shapes)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>list<sp/>=<sp/>util()-&gt;flatten(shapes);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>m_selected.<ref refid="class_variant_hash_list_1a4d7e3cc22c3fcf3414d02a5eaba2272e" kindref="member">remove</ref>(list);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>var,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;setSelected(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1aa760adcdd7ebc97ccd1afed5b2337822" kindref="member">EditorBase::deselectAll</ref>()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>var,<sp/>m_selected.toList())<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;setSelected(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>m_selected.<ref refid="class_variant_hash_list_1ad3b016990658125586c6198f0da3b843" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1a61353659281e082c4e00e0510b686d10" kindref="member">EditorBase::deselectAllExcept</ref>(QVariant<sp/>except)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>removed<sp/>=<sp/>m_selected.<ref refid="class_variant_hash_list_1ad3b016990658125586c6198f0da3b843" kindref="member">clear</ref>(except,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(QVariant<sp/>var,<sp/>removed)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(var);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;setSelected(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_editor_base_1a575d7e53d9543b402bdacf7dec36edb1" kindref="member">EditorBase::removeSelected</ref>()</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<ref refid="class_editor_base_1a4ab517a9763439ebed1b31778cbc77e9" kindref="member">selectedList</ref>());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_editor_base_1aa760adcdd7ebc97ccd1afed5b2337822" kindref="member">deselectAll</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>updateCanvas();</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">QQuickItem<sp/>*EditorBase::activeShape()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="329"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_activeShape;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setActiveShape(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeShape<sp/>==<sp/>arg)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeShape<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeShape<sp/>==<sp/>m_shapeAtMouse)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(0);<sp/></highlight><highlight class="comment">//<sp/>ShapeAtMouse<sp/>cannot<sp/>be<sp/>the<sp/>activeShape<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>activeShapeChanged(arg);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>EditorBase::currentSnap()</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_currentSnap;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setCurrentSnap(<ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>arg)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_currentSnap<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastSnap<sp/>=<sp/>m_currentSnap;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentSnap<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>snapChanged(arg);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>particularly<sp/>interested<sp/>in<sp/>the<sp/>snap<sp/>type<sp/>changing...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_currentSnap.snappedType<sp/>!=<sp/>m_lastSnap.snappedType</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_lastSnap.snappedType<sp/>!=<sp/>SnapResult::None)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>snapTypeChanged();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::resetCurrentSnap()</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>setCurrentSnap(<ref refid="class_snap_result" kindref="compound">SnapResult</ref>(QPointF()));</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>Hint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">QUrl<sp/>EditorBase::hint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="370"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hint;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setHint(QUrl<sp/>arg)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hint<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hint<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>hintChanged(arg);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">QQuickItem<sp/>*EditorBase::canvas()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="383"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(QQuickItem*)m_canvas;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setCanvas(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_editor_canvas" kindref="compound">EditorCanvas</ref><sp/>*can<sp/>=<sp/>qobject_cast&lt;<ref refid="class_editor_canvas" kindref="compound">EditorCanvas</ref>*&gt;(arg);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can<sp/>&amp;&amp;<sp/>m_canvas<sp/>!=<sp/>can)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can-&gt;setEditor(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_canvas<sp/>=<sp/>can;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>canvasChanged(arg);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">QQuickItem<sp/>*EditorBase::shapeLayer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="399"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shapeLayer;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setShapeLayer(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shapeLayer<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shapeLayer<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>shapeLayerChanged(arg);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>config<sp/>and<sp/>util<sp/>properties...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="class_config_eda" kindref="compound">ConfigEda</ref><sp/>*EditorBase::config()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="413"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_config;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setConfig(<ref refid="class_config_eda" kindref="compound">ConfigEda</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>configChanged(arg);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="class_util_eda" kindref="compound">UtilEda</ref><sp/>*EditorBase::util()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="426"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_util;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setUtil(<ref refid="class_util_eda" kindref="compound">UtilEda</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_util<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_util<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>utilChanged(arg);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1a8e6abbe6e9ab6140926b1fcf3ce7ae1f" kindref="member">EditorBase::mouse</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="445"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouse;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/></highlight><highlight class="comment">//TODO:<sp/>Diagrams<sp/>for<sp/>these<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1aa8e8592a08e92e7f22c003c5a0078efb" kindref="member">EditorBase::mouseFrame</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="455"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseFrame;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1a6d3d75a27c38559ded47b0a697d30e1e" kindref="member">EditorBase::mouseSnap</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="465"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseSnap;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>ViewCenter...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">QPointF<sp/>EditorBase::viewCenter()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="471"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentCenter;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setViewCenter(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Make<sp/>this<sp/>update<sp/>the<sp/>view...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentCenter<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_contentCenter<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>viewCenterChanged(arg);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>ViewLeft/Right/Top/Bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">qreal<sp/>EditorBase::viewLeft()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="486"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentLeft;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setViewLeft(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentLeft<sp/>==<sp/>arg)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentLeft<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>viewLeftChanged(arg);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">qreal<sp/>EditorBase::viewRight()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="499"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentRight;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setViewRight(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentRight<sp/>==<sp/>arg)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentRight<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>viewRightChanged(arg);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">qreal<sp/>EditorBase::viewTop()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="512"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentTop;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setViewTop(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentTop<sp/>==<sp/>arg)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentTop<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>viewTopChanged(arg);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">qreal<sp/>EditorBase::viewBottom()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="525"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_contentBottom;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setViewBottom(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_contentBottom<sp/>==<sp/>arg)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>m_contentBottom<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>viewBottomChanged(arg);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>WorkspaceSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">QSize<sp/>EditorBase::workspaceSize()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="539"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_workspaceSize;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setWorkspaceSize(QSize<sp/>arg)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_workspaceSize<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_workspaceSize<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>workspaceSizeChanged(arg);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>BorderSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">qreal<sp/>EditorBase::borderSize()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="553"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_borderSize;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setBorderSize(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_borderSize<sp/>!=<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_borderSize<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>borderSizeChanged(arg);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document<sp/>TotalSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">QSize<sp/>EditorBase::totalSize()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="567"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_totalSize;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1a14b936f1a28de6788a26a63c25a5aa28" kindref="member">EditorBase::frameToSpace</ref>(QPointF<sp/>framePos)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>that<sp/>&quot;originY&quot;<sp/>is<sp/>NOT<sp/>in<sp/>workspace<sp/>coordinates,<sp/>but<sp/>in<sp/>item<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>result<sp/>=<sp/>QPointF((framePos.x()<sp/>+<sp/>viewLeft())/zoom()<sp/>-<sp/>m_origin.x(),</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-((framePos.y()<sp/>+<sp/>totalSize().height()<sp/>-<sp/>viewTop())/zoom()<sp/>-<sp/>m_origin.y())<sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1a9f89a5b0c9098da07bfb983476b27005" kindref="member">EditorBase::spaceToFrame</ref>(QPointF<sp/>spacePos)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>result<sp/>=<sp/>QPointF((spacePos.x()<sp/>+<sp/>m_origin.x())*zoom()<sp/>-<sp/>viewLeft(),</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-spacePos.y()<sp/>+<sp/>m_origin.y())*zoom()<sp/>-<sp/>totalSize().height()<sp/>+<sp/>viewTop());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1aaf9f9c455b3841010d6d2d243b4abedc" kindref="member">EditorBase::spaceToReal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;spacePos)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QPointF((spacePos.x()<sp/>+<sp/>m_origin.x())*zoom(),</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-spacePos.y()<sp/>+<sp/>m_origin.y())*zoom());</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1af2bf8566bb1ab816ce14bb1394aa9002" kindref="member">EditorBase::realToSpace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QPointF<sp/>&amp;realPos)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QPointF(realPos.x()/zoom()<sp/>-<sp/>m_origin.x(),</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(realPos.y()/zoom()<sp/>-<sp/>m_origin.y()));</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">QList&lt;SnapResult&gt;<sp/><ref refid="class_editor_base_1a1b2631299c38d5c355bdbf464fbaef65" kindref="member">EditorBase::findSnaps</ref>(QPointF<sp/>value,<sp/>QQuickItem<sp/>*subject,<sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_config)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QList&lt;SnapResult&gt;();<sp/></highlight><highlight class="comment">//<sp/>No<sp/>good<sp/>until<sp/>config<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Make<sp/>this<sp/>better...<sp/>Two<sp/>separate<sp/>lists<sp/>isn&apos;t<sp/>very<sp/>good.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>something<sp/>good<sp/>for<sp/>a<sp/>factory<sp/>type<sp/>thing?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Snapping*&gt;<sp/>snapList<sp/>=<sp/>*(m_config-&gt;snappings());</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;SnapResult&gt;<sp/>results;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>different<sp/>snap<sp/>functions<sp/>and<sp/>record<sp/>valid<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_snapping" kindref="compound">Snapping</ref><sp/>*snapping,<sp/>snapList)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>*res<sp/>=<sp/>snapping-&gt;snap(value,<sp/>subject,<sp/>shape,<sp/>m_config,<sp/>util());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.append(*res);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>*EditorBase::findSnap(QPointF<sp/>value,<sp/>QQuickItem<sp/>*subject,<sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;SnapResult&gt;<sp/>results<sp/>=<sp/><ref refid="class_editor_base_1a1b2631299c38d5c355bdbf464fbaef65" kindref="member">findSnaps</ref>(value,<sp/>subject,<sp/>shape);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Allow<sp/>the<sp/>user<sp/>to<sp/>set<sp/>their<sp/>own<sp/>priority<sp/>order<sp/>for<sp/>snapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Press<sp/>tab<sp/>to<sp/>cycle<sp/>through<sp/>different<sp/>snaps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Hold<sp/>space<sp/>to<sp/>enforce<sp/>the<sp/>use<sp/>of<sp/>only<sp/>that<sp/>snapping<sp/>(including<sp/>&quot;None&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>I<sp/>worry<sp/>that<sp/>this<sp/>whole<sp/>snap<sp/>thing<sp/>could<sp/>be<sp/>causing<sp/>memory<sp/>leaks...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>*bestRes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_snap_result" kindref="compound">SnapResult</ref>(</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SnapResult::None,<sp/>value,<sp/>0);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>res,<sp/>results)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res.snappedType<sp/>&lt;<sp/>bestRes-&gt;snappedType)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res.snappedType<sp/>==<sp/>bestRes-&gt;snappedType</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>res.snappedDistance<sp/>&gt;=<sp/>bestRes-&gt;snappedDistance)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bestRes<sp/>=<sp/>res;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helps<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>snap<sp/>just<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Alternatively<sp/>utileda<sp/>could<sp/>have<sp/>a<sp/>signal.<sp/>When<sp/>emitted<sp/>it<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>else<sp/>can<sp/>create<sp/>the<sp/>highlight<sp/>QML<sp/>item...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>setCurrentSnap(*bestRes);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>setHint(bestRes-&gt;hintUrl);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestRes;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">QPointF<sp/><ref refid="class_editor_base_1af1778fa96e992a5b69537ed60525076a" kindref="member">EditorBase::snapTo</ref>(QPointF<sp/>value,<sp/>QQuickItem<sp/>*subject,<sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_snapEnabled)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_snap_result" kindref="compound">SnapResult</ref><sp/>*result<sp/>=<sp/>findSnap(value,<sp/>subject,<sp/>shape);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result-&gt;snappedPoint;</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*<sp/>Want<sp/>to<sp/>capture<sp/>all<sp/>the<sp/>events<sp/>in<sp/>the<sp/>root.</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>When<sp/>this<sp/>is<sp/>the<sp/>current<sp/>editor,<sp/>ConfigEda<sp/>installs<sp/>this<sp/>filter</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>root<sp/>QML<sp/>object.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EditorBase::eventFilter(QObject<sp/>*watched,<sp/>QEvent<sp/>*event)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;type())<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QEvent::MouseMove:<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMouseEvent<sp/>*qmouse<sp/>=<sp/>(QMouseEvent*)event;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qmouse-&gt;source()<sp/>!=<sp/>Qt::MouseEventNotSynthesized)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>mouse<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref><sp/>*mouseEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref>(event);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mouseFrame<sp/>=<sp/>mapFromScene(QPointF(mouseEvent-&gt;x(),<sp/>mouseEvent-&gt;y()));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseFrameChanged(m_mouseFrame);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseMoved(mouseEvent);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QEvent::MouseButtonPress:<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QMouseEvent<sp/>*qmouse<sp/>=<sp/>(QMouseEvent*)event;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qmouse-&gt;source()<sp/>!=<sp/>Qt::MouseEventNotSynthesized)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref><sp/>*mouseEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref>(event);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouseButtons<sp/>&amp;<sp/>mouseEvent-&gt;button())<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mouseButtons<sp/>=<sp/>mouseEvent-&gt;buttons();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Already<sp/>have<sp/>it..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dragging<sp/>is<sp/>for<sp/>the<sp/>left-button<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mouseEvent-&gt;button()<sp/>==<sp/>Qt::LeftButton)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMouseStart(m_mouse);<sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>and<sp/>simple..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMouseDelta(QPointF());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mouseButtons<sp/>=<sp/>mouseEvent-&gt;buttons();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseButtonsChanged(m_mouseButtons);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mousePressed(mouseEvent);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QEvent::MouseButtonRelease:<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref><sp/>*mouseEvent<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_mouse_event" kindref="compound">MouseEvent</ref>(event);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_buttons<sp/>=<sp/>m_mouseButtons;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mouseButtons<sp/>=<sp/>mouseEvent-&gt;buttons();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(old_buttons<sp/>&amp;<sp/>mouseEvent-&gt;button()))</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Button<sp/>already<sp/>released</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseButtonsChanged(m_mouseButtons);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseReleased(mouseEvent);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clicking<sp/>is<sp/>for<sp/>the<sp/>left-button<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mouseEvent-&gt;button()<sp/>==<sp/>Qt::LeftButton)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointF<sp/>frameDelta<sp/>=<sp/>m_mouseFrame<sp/>-<sp/><ref refid="class_editor_base_1a9f89a5b0c9098da07bfb983476b27005" kindref="member">spaceToFrame</ref>(m_mouseStart);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frameDelta.manhattanLength()<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>mouseClicked(mouseEvent);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QQuickItem::eventFilter(watched,<sp/>event);;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateMouse()</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>setMouse(<ref refid="class_editor_base_1a14b936f1a28de6788a26a63c25a5aa28" kindref="member">frameToSpace</ref>(m_mouseFrame));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>setMouseSnap(<ref refid="class_editor_base_1af1778fa96e992a5b69537ed60525076a" kindref="member">snapTo</ref>(m_mouse,<sp/>m_activeShape,<sp/>m_shapeAtMouse));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>setMouseDelta(m_mouse<sp/>-<sp/>m_mouseStart);</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateShapeAtMouse()</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_mouseInWorkSpace)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(0);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shapeAtMouse<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_shapeAtMouse-&gt;<ref refid="class_shape_base_1adc0cae1e69687a433b0ba0ebb95bf164" kindref="member">isTouchedBy</ref>(m_mouse,<sp/>5)<sp/>||</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_activeHandle<sp/>&amp;&amp;<sp/>m_activeHandle-&gt;parentItem()<sp/>==<sp/>m_shapeAtMouse))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeShape<sp/>!=<sp/>m_shapeAtMouse)<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Use<sp/>a<sp/>variable<sp/>for<sp/>touch<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantList<sp/>shapes<sp/>=<sp/>shapeList();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=shapes.length()-1;<sp/>i&gt;=0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qvariant_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(shapes[i]);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>==<sp/>m_activeShape)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>very<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape-&gt;<ref refid="class_shape_base_1adc0cae1e69687a433b0ba0ebb95bf164" kindref="member">isTouchedBy</ref>(m_mouse,<sp/>5))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(shape);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>setShapeAtMouse(0);<sp/></highlight><highlight class="comment">//<sp/>None<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateCursor()</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qDebug()<sp/>&lt;&lt;<sp/>&quot;\tUpdatin&apos;<sp/>cursor&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_mouseInWorkSpace<sp/>||<sp/>!m_activeTool)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QCursor<sp/>c(Qt::ArrowCursor);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCursor(c);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>cursor<sp/>image<sp/>before<sp/>redrawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorPainter-&gt;fillRect(0,0,32,32,<sp/>Qt::white);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMaskPainter-&gt;fillRect(0,0,32,32,<sp/>Qt::white);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeTool-&gt;cursor()-&gt;paintCursor(m_cursorPainter,<sp/>m_cursorMaskPainter,<sp/>&amp;m_cursorHot);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(QCursor(*m_cursorBitmap,<sp/>*m_cursorMask,<sp/>m_cursorHot.x(),<sp/>m_cursorHot.y()));</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateCursorHint()</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorPainter-&gt;fillRect(32,0,32,32,<sp/>Qt::white);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMaskPainter-&gt;fillRect(32,0,32,32,<sp/>Qt::white);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Test<sp/>how<sp/>the<sp/>custom<sp/>hints<sp/>look<sp/>on<sp/>things<sp/>like<sp/>Retina<sp/>Displays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>path<sp/>=<sp/>m_hint.toString();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.startsWith(</highlight><highlight class="stringliteral">&quot;qrc:/&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path.remove(0,3);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>QBitmap<sp/>hintBit(path);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorPainter-&gt;drawPixmap(32,<sp/>0,<sp/>hintBit);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cursorMaskPainter-&gt;drawPixmap(32,<sp/>0,<sp/>util()-&gt;dilate(hintBit));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursor(QCursor(*m_cursorBitmap,<sp/>*m_cursorMask,<sp/>m_cursorHot.x(),<sp/>m_cursorHot.y()));</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">QQuickItem<sp/>*EditorBase::shapeAtMouse()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="822"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shapeAtMouse;</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">QQuickItem<sp/>*EditorBase::activeHandle()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="827"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_activeHandle;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EditorBase::snapEnabled()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="832"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_snapEnabled;</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">QQuickItem<sp/>*EditorBase::hudLayer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="837"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hudLayer;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EditorBase::mouseButtons()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="842"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseButtons;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">QQuickItem<sp/>*EditorBase::topLayer()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="847"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_topLayer;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EditorBase::getMousePressed()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="852"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mousePressed;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">QPointF<sp/>EditorBase::mouseStart()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="857"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseStart;</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setMouseStart(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouseStart<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseStart<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mouseStartChanged(arg);</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SLOTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateTotalSize()</highlight></codeline>
<codeline lineno="870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>totalWidth<sp/>=<sp/>m_borderSize*2<sp/>+<sp/>m_workspaceSize.width();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>totalHeight<sp/>=<sp/>m_borderSize*2<sp/>+<sp/>m_workspaceSize.height();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Could<sp/>fit<sp/>this<sp/>onto<sp/>2<sp/>&quot;lines&quot;<sp/>but<sp/>this<sp/>is<sp/>neater...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>totalWidth<sp/>=<sp/>qMax(width(),<sp/>totalWidth);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>totalHeight<sp/>=<sp/>qMax(height(),<sp/>totalHeight);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>QSize<sp/>newSize(totalWidth,<sp/>totalHeight);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>==<sp/>m_totalSize)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>m_totalSize<sp/>=<sp/>newSize;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>totalSizeChanged(newSize);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//TODO:<sp/>Document<sp/>updateCanas.<sp/>Still<sp/>used?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::updateCanvas()</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_canvas)<sp/>m_canvas-&gt;update();</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::shapeActiveHandleChanged()</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>QObject<sp/>*sender<sp/>=<sp/>QObject::sender();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sender)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qobject_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(sender);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>technically<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>QQuickItem<sp/>*handle<sp/>=<sp/>shape-&gt;activeHandle();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>the<sp/>assumption<sp/>that<sp/>the<sp/>mouse<sp/>area<sp/>of<sp/>handles<sp/>from<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shapes<sp/>cannot<sp/>be<sp/>active<sp/>at<sp/>the<sp/>same<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Maybe<sp/>test<sp/>this<sp/>some<sp/>time...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeHandle)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeHandle-&gt;parentItem()<sp/>==<sp/>shape)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setActiveHandle(handle);<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>overwrite<sp/>if<sp/>from<sp/>the<sp/>same<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setActiveHandle(handle);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::shapeHasMouseChanged()</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>QObject<sp/>*sender<sp/>=<sp/>QObject::sender();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sender)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qobject_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(sender);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shape)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>technically<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMouse<sp/>=<sp/>shape-&gt;hasMouse();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>make<sp/>the<sp/>assumption<sp/>that<sp/>the<sp/>mouse<sp/>area<sp/>of<sp/>handles<sp/>from<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shapes<sp/>cannot<sp/>be<sp/>active<sp/>at<sp/>the<sp/>same<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Maybe<sp/>test<sp/>this<sp/>some<sp/>time...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shapeAtMouse<sp/>==<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasMouse)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(0);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_shapeAtMouse)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(shape);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::zoomTest()</highlight></codeline>
<codeline lineno="932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>QVariantMap<sp/>map;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qDebug()<sp/>&lt;&lt;<sp/>&quot;Zoomed&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_test-&gt;create(map);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">QPointF<sp/>EditorBase::mouseDelta()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="939"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseDelta;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setMouseDelta(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouseDelta<sp/>==<sp/>arg<sp/>||<sp/>!(m_mouseButtons<sp/>&amp;<sp/>Qt::LeftButton))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseDelta<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mouseDeltaChanged(arg);</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setMousePressed(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>arg)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oldValue<sp/>=<sp/>m_mousePressed;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mousePressed<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>just<sp/>clicked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMouseStart(m_mouse);<sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>and<sp/>simple..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMouseDelta(QPointF());</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mousePressed<sp/>==<sp/>oldValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mousePressedChanged(arg);</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setTopLayer(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_topLayer<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>m_topLayer<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>topLayerChanged(arg);</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setHudLayer(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hudLayer<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hudLayer<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>hudLayerChanged(arg);</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal">QPointF<sp/>EditorBase::origin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="980"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_origin;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setOrigin(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_origin<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>m_origin<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>originChanged(arg);</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setActiveHandle(QQuickItem<sp/>*arg)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeHandle<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QString<sp/>name(arg-&gt;metaObject()-&gt;className());</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.startsWith(</highlight><highlight class="stringliteral">&quot;Handle&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qWarning()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Editor.activeHandle<sp/>can<sp/>only<sp/>be<sp/>of<sp/>QML<sp/>Type,<sp/>\&quot;Handle\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeHandle<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeHandle)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>shapeAtMouse<sp/>should<sp/>be<sp/>the<sp/>same<sp/>as<sp/>the<sp/>handle&apos;s<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*shape<sp/>=<sp/>qobject_cast&lt;<ref refid="class_shape_base" kindref="compound">ShapeBase</ref>*&gt;(m_activeHandle-&gt;parentItem());</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape<sp/>&amp;&amp;<sp/>shape<sp/>!=<sp/>m_activeShape)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setShapeAtMouse(shape);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateShapeAtMouse();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateShapeAtMouse();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>activeHandleChanged(arg);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setSnapEnabled(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>arg)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_snapEnabled<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>m_snapEnabled<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>snapEnabledChanged(arg);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setShapeAtMouse(<ref refid="class_shape_base" kindref="compound">ShapeBase</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shapeAtMouse<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_shapeAtMouse)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shapeAtMouse-&gt;setHasMouse(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shapeAtMouse<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg-&gt;setHasMouse(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>shapeAtMouseChanged(arg);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EditorBase::mouseInWorkSpace()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1044"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mouseInWorkSpace;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setMouseSnap(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouseSnap<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseSnap<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mouseSnapChanged(arg);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setMouse(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouse<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouse<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mouseChanged(arg);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setmouseInWorkSpace(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>arg)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mouseInWorkSpace<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mouseInWorkSpace<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>mouseInWorkSpaceChanged(arg);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><ref refid="class_editor_tool" kindref="compound">EditorTool</ref><sp/>*EditorBase::activeTool()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1071"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_activeTool;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EditorBase::setActiveTool(<ref refid="class_editor_tool" kindref="compound">EditorTool</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_activeTool<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>m_activeTool<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>activeToolChanged(arg);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/kitham/projects/qt/eda/src/editorbase.cpp"/>
  </compounddef>
</doxygen>
