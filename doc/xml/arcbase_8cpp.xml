<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="arcbase_8cpp" kind="file">
    <compoundname>arcbase.cpp</compoundname>
    <includes refid="arcbase_8h" local="yes">arcbase.h</includes>
    <includes local="no">QtCore/qmath.h</includes>
    <incdepgraph>
      <node id="91">
        <label>QMap</label>
      </node>
      <node id="86">
        <label>configeda.h</label>
        <link refid="configeda_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>arcbase.h</label>
        <link refid="arcbase_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>editortool.h</label>
        <link refid="editortool_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>limits</label>
      </node>
      <node id="88">
        <label>snapping/snapping.h</label>
        <link refid="snapping_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>QObject</label>
      </node>
      <node id="101">
        <label>QPointF</label>
      </node>
      <node id="104">
        <label>QtCore/qmath.h</label>
      </node>
      <node id="93">
        <label>services/apiservice.h</label>
        <link refid="apiservice_8h_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>QPoint</label>
      </node>
      <node id="103">
        <label>mouseevent.h</label>
        <link refid="mouseevent_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>QQmlEngine</label>
      </node>
      <node id="96">
        <label>utileda.h</label>
        <link refid="utileda_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>QQuickPaintedItem</label>
      </node>
      <node id="87">
        <label>QMutex</label>
      </node>
      <node id="84">
        <label>QPainter</label>
      </node>
      <node id="100">
        <label>point.h</label>
        <link refid="point_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>../apientry.h</label>
        <link refid="apientry_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>QDebug</label>
      </node>
      <node id="83">
        <label>editorcanvas.h</label>
        <link refid="editorcanvas_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>editorbase.h</label>
        <link refid="editorbase_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>shapebase.h</label>
        <link refid="shapebase_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>QMetaMethod</label>
      </node>
      <node id="85">
        <label>QPainterPath</label>
      </node>
      <node id="73">
        <label>/home/kitizz/projects/eda/src/arcbase.cpp</label>
        <link refid="arcbase.cpp"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>common/varianthashlist.h</label>
        <link refid="varianthashlist_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>QQuickItem</label>
      </node>
      <node id="94">
        <label>service.h</label>
        <link refid="service_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>QHash</label>
      </node>
      <node id="82">
        <label>QVariant</label>
      </node>
      <node id="90">
        <label>apiobject.h</label>
        <link refid="apiobject_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arcbase.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QtCore/qmath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">ArcBase::ArcBase(QQuickItem<sp/>*parent)<sp/>:</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shape_base" kindref="compound">ShapeBase</ref>(parent),</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>m_radius(std::numeric_limits&lt;qreal&gt;::max()),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>m_startAngle(0),</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>m_endAngle(0),</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>m_startPoint(new<sp/><ref refid="class_point" kindref="compound">Point</ref>(this)),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>m_endPoint(new<sp/><ref refid="class_point" kindref="compound">Point</ref>(this)),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bulgeDistance(0),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefA(false),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefB(false),</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>boundsDirty(true),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bulgePoint(new<sp/><ref refid="class_point" kindref="compound">Point</ref>(this))</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::startPointChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefA);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::endPointChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefA);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::bulgeDistanceChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefA);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::startAngleChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefB);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::endAngleChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefB);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ShapeBase::centerChanged,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateDefB);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>the<sp/>point<sp/>changed<sp/>signals<sp/>to<sp/>their<sp/>respective<sp/>property<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_startPoint,<sp/>&amp;Point::changed,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::startPointChanged);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_endPoint,<sp/>&amp;Point::changed,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::endPointChanged);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(m_bulgePoint,<sp/>&amp;Point::changed,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;ArcBase::updateBulgeDistance);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setCenter(QPointF<sp/>arg)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeBase::setCenter(arg);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">qreal<sp/>ArcBase::radius()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="38"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_radius;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setRadius(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_radius<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>m_radius<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>radiusChanged(arg);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">qreal<sp/>ArcBase::startAngle()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="51"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_startAngle;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setStartAngle(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>it<sp/>is<sp/>smaller<sp/>than<sp/>end<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(arg<sp/>&gt;<sp/>m_endAngle)<sp/>arg<sp/>-=<sp/>360;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_startAngle<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>m_startAngle<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>startAngleChanged(arg);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">qreal<sp/>ArcBase::endAngle()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="67"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_endAngle;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setEndAngle(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>it<sp/>is<sp/>larger<sp/>than<sp/>start<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(arg<sp/>&lt;<sp/>m_startAngle)<sp/>arg<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_endAngle<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>m_endAngle<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>endAngleChanged(arg);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="class_point" kindref="compound">Point</ref><sp/>*ArcBase::startPoint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="82"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_startPoint;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setStartPoint(<ref refid="class_point" kindref="compound">Point</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_startPoint-&gt;equals(arg))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_startPoint-&gt;setPoint(arg);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>emit<sp/>startPointChanged();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="class_point" kindref="compound">Point</ref><sp/>*ArcBase::endPoint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_endPoint;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setEndPoint(<ref refid="class_point" kindref="compound">Point</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_endPoint-&gt;equals(arg))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_endPoint-&gt;setPoint(arg);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>emit<sp/>endPointChanged();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">qreal<sp/>ArcBase::bulgeDistance()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="106"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bulgeDistance;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setBulgeDistance(qreal<sp/>arg)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bulgeDistance<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>-arg;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointF<sp/>s<sp/>=<sp/>m_startPoint-&gt;toPointF();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_startPoint-&gt;setPoint(m_endPoint);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_endPoint-&gt;setPoint(s);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>startPointChanged();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emit<sp/>endPointChanged();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bulgeDistance<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>bulgeDistanceChanged(arg);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="class_util_eda" kindref="compound">UtilEda</ref><sp/>*ArcBase::util()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="126"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_util;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setUtil(<ref refid="class_util_eda" kindref="compound">UtilEda</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_util<sp/>==<sp/>arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>m_util<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>utilChanged(arg);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="class_point" kindref="compound">Point</ref><sp/>*ArcBase::bulgePoint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="138"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bulgePoint;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">QRectF<sp/><ref refid="class_arc_base_1a631fe254d9252c7e7980944f2fb228d8" kindref="member">ArcBase::bounds</ref>()</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>QRectF();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boundsDirty)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_shape_base_1aa3a43573f97bfc5a374ab0ceff21bf5d" kindref="member">ShapeBase::bounds</ref>();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adapted<sp/>from:<sp/>http://goo.gl/BF8FB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QPointF&gt;<sp/>pts;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>pts<sp/>&lt;&lt;<sp/>m_startPoint-&gt;toPointF()<sp/>&lt;&lt;<sp/>m_endPoint-&gt;toPointF();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>all<sp/>the<sp/>angles<sp/>~~0,90,180,270<sp/>that<sp/>are<sp/>between<sp/>start<sp/>and<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>qCeil(m_startAngle/90)*90;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha<sp/>&gt;<sp/>m_endAngle)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>theta<sp/>=<sp/>util()-&gt;deg2rad(alpha);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointF<sp/>p<sp/>=<sp/>m_radius*QPointF(qCos(theta),<sp/>qSin(theta));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pts<sp/>&lt;&lt;<sp/>(*center()<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>+=<sp/>90;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minX=m_startPoint-&gt;x();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minY=m_startPoint-&gt;y();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxX=minX;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxY=minY;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>remove<sp/>m_startPoint<sp/>from<sp/>list,<sp/>but<sp/>then<sp/>the<sp/>algorithm<sp/>is<sp/>ambiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(QPointF<sp/>p,<sp/>pts)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.x()<sp/>&lt;<sp/>minX)<sp/>minX<sp/>=<sp/>p.x();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.x()<sp/>&gt;<sp/>maxX)<sp/>maxX<sp/>=<sp/>p.x();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.y()<sp/>&lt;<sp/>minY)<sp/>minY<sp/>=<sp/>p.y();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.y()<sp/>&gt;<sp/>maxY)<sp/>maxY<sp/>=<sp/>p.y();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>setBounds(QRectF(minX,<sp/>minY,<sp/>maxX<sp/>-<sp/>minX,<sp/>maxY<sp/>-<sp/>minY));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>boundsDirty<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_shape_base_1aa3a43573f97bfc5a374ab0ceff21bf5d" kindref="member">ShapeBase::bounds</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_arc_base_1af36ca418e0846d4cc319b618d07cbec1" kindref="member">ArcBase::isIntersectedBy</ref>(QRectF<sp/>rect)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Holy<sp/>Crap,<sp/>this<sp/>was<sp/>insanely<sp/>difficult<sp/>to<sp/>work<sp/>out...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remains<sp/>to<sp/>be<sp/>seen<sp/>how<sp/>CPU<sp/>intensive<sp/>this<sp/>will<sp/>be...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>b<sp/>=<sp/><ref refid="class_arc_base_1a631fe254d9252c7e7980944f2fb228d8" kindref="member">bounds</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Boilerplate!<sp/>=D<sp/>(From<sp/>Util-&gt;RectIntersectsRect,<sp/>cos<sp/>I<sp/>want<sp/>this<sp/>vars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minAx<sp/>=<sp/>rect.x();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minAy<sp/>=<sp/>rect.y();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxAx<sp/>=<sp/>rect.x()<sp/>+<sp/>rect.width();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxAy<sp/>=<sp/>rect.y()<sp/>+<sp/>rect.height();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minBx<sp/>=<sp/>b.x();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>minBy<sp/>=<sp/>b.y();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxBx<sp/>=<sp/>b.x()<sp/>+<sp/>b.width();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>maxBy<sp/>=<sp/>b.y()<sp/>+<sp/>b.height();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxAx<sp/>&lt;<sp/>minBx)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAx<sp/>&gt;<sp/>maxBx)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxAy<sp/>&lt;<sp/>minBy)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAy<sp/>&gt;<sp/>maxBy)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAx<sp/>&lt;=<sp/>minBx<sp/>&amp;&amp;<sp/>maxAx<sp/>&gt;=<sp/>maxBx)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Rect<sp/>cuts<sp/>through<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minAy<sp/>&lt;=<sp/>minBy<sp/>&amp;&amp;<sp/>maxAy<sp/>&gt;=<sp/>maxBy)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;QPointF&gt;<sp/>pts;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>pts<sp/>&lt;&lt;<sp/>rect.topLeft()<sp/>&lt;&lt;<sp/>rect.topRight()</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rect.bottomRight()<sp/>&lt;&lt;<sp/>rect.bottomLeft();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>r2<sp/>=<sp/>m_radius*m_radius;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>lastDelta<sp/>=<sp/>pts[3]<sp/>-<sp/>*center();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastPointInBounds<sp/>=<sp/>b.contains(pts[3]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastPointInRadius<sp/>=<sp/>(util()-&gt;length2(lastDelta)<sp/>&lt;<sp/>r2);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>base<sp/>=<sp/>qFloor(m_startAngle/360)*360;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>lastTheta<sp/>=<sp/>base<sp/>+<sp/>util()-&gt;rad2deg(<sp/>qAtan2(lastDelta.y(),<sp/>lastDelta.x())<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lastTheta<sp/>&lt;<sp/>m_startAngle)<sp/>lastTheta<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>out<sp/>the<sp/>info<sp/>for<sp/>the<sp/>new<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pointInBounds<sp/>=<sp/>b.contains(pts[i]);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QPointF<sp/>delta<sp/>=<sp/>pts[i]<sp/>-<sp/>*center();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pointInRadius<sp/>=<sp/>util()-&gt;length2(delta)<sp/>&lt;<sp/>r2;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>base<sp/>=<sp/>qFloor(m_startAngle/360)*360;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>theta<sp/>=<sp/>base<sp/>+<sp/>util()-&gt;rad2deg(<sp/>qAtan2(delta.y(),<sp/>delta.x())<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(theta<sp/>&lt;<sp/>m_startAngle)<sp/>theta<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pointInBounds<sp/>&amp;&amp;<sp/>!lastPointInBounds)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Line<sp/>is<sp/>definitely<sp/>away<sp/>from<sp/>the<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointInRadius<sp/>&amp;&amp;<sp/>lastPointInRadius)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Line<sp/>is<sp/>totally<sp/>inside,<sp/>no<sp/>arc<sp/>collision...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lastPointInRadius<sp/>&amp;&amp;<sp/>!pointInRadius)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>points<sp/>are<sp/>outside<sp/>the<sp/>radius.<sp/>Need<sp/>to<sp/>see<sp/>if<sp/>it<sp/>crosses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>through<sp/>the<sp/>arc<sp/>at<sp/>all.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>problem<sp/>is<sp/>slightly<sp/>simplified<sp/>by<sp/>knowing<sp/>that<sp/>the<sp/>lines<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>vertical<sp/>or<sp/>horizontal.<sp/>AND<sp/>inside<sp/>a<sp/>tight<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>around<sp/>the<sp/>arc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>check<sp/>if<sp/>the<sp/>line<sp/>ends<sp/>are<sp/>in<sp/>different<sp/>quadrants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta.x()*lastDelta.x()<sp/>&lt;=<sp/>0<sp/>||<sp/>delta.y()*lastDelta.y()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>segment<sp/>intersects<sp/>with<sp/>the<sp/>arc<sp/>=D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Therefore<sp/>all<sp/>we<sp/>have<sp/>left<sp/>is<sp/>one<sp/>point<sp/>inside<sp/>radius<sp/>and<sp/>one<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((theta<sp/>-<sp/>m_endAngle)*(lastTheta<sp/>-<sp/>m_endAngle)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>point<sp/>is<sp/>in<sp/>the<sp/>arc<sp/>&quot;gap&quot;,<sp/>the<sp/>other<sp/>is<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta.x()<sp/>==<sp/>lastDelta.x())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Vertical<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>xx<sp/>=<sp/>pts[i].x();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>vertical<sp/>line<sp/>is<sp/>to<sp/>left<sp/>or<sp/>right<sp/>of<sp/>arc<sp/>end-points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(util()-&gt;clamp(xx,<sp/>m_startPoint-&gt;x(),<sp/>m_endPoint-&gt;x())<sp/>!=<sp/>xx)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Horizontal<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>yy<sp/>=<sp/>pts[i].y();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>horizontal<sp/>line<sp/>is<sp/>above<sp/>or<sp/>below<sp/>arc<sp/>end-points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Diagrams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(util()-&gt;clamp(yy,<sp/>m_startPoint-&gt;y(),<sp/>m_endPoint-&gt;y())<sp/>!=<sp/>yy)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theta<sp/>&lt;<sp/>m_endAngle)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>line<sp/>end<sp/>points<sp/>are<sp/>the<sp/>arc<sp/>sector,<sp/>so<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//else<sp/>both<sp/>lines<sp/>end<sp/>points<sp/>are<sp/>in<sp/>the<sp/>arc<sp/>&quot;gap&quot;.<sp/>No<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>&quot;last&quot;<sp/>values.<sp/>Do<sp/>this<sp/>to<sp/>save<sp/>calcs<sp/>(maybe).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastPointInRadius<sp/>=<sp/>pointInRadius;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastPointInBounds<sp/>=<sp/>pointInBounds;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastDelta<sp/>=<sp/>delta;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTheta<sp/>=<sp/>theta;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_arc_base_1a371db1a28b54698b7cf443150adb8613" kindref="member">ArcBase::isTouchedBy</ref>(QPointF<sp/>point,<sp/>qreal<sp/>radius)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>delta<sp/>=<sp/>point<sp/>-<sp/>*center();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>if<sp/>point<sp/>is<sp/>near<sp/>the<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>l2<sp/>=<sp/>util()-&gt;length2(delta);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>rIn<sp/>=<sp/>qPow(m_radius<sp/>-<sp/>radius,<sp/>2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>rOut<sp/>=<sp/>qPow(m_radius<sp/>+<sp/>radius,<sp/>2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(util()-&gt;clamp(l2,<sp/>rIn,<sp/>rOut)<sp/>!=<sp/>l2)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Point<sp/>is<sp/>beyond,<sp/>or<sp/>inside<sp/>perimeter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>if<sp/>point<sp/>is<sp/>in<sp/>the<sp/>arc<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>base<sp/>=<sp/>qFloor(m_startAngle/360)*360;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>theta<sp/>=<sp/>base<sp/>+<sp/>util()-&gt;rad2deg(<sp/>qAtan2(delta.y(),<sp/>delta.x())<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(theta<sp/>&lt;<sp/>m_startAngle)<sp/>theta<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theta<sp/>&gt;<sp/>m_endAngle)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Point<sp/>is<sp/>in<sp/>the<sp/>arc<sp/>&quot;gap&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::setBulgePoint(<ref refid="class_point" kindref="compound">Point</ref><sp/>*arg)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bulgePoint-&gt;equals(arg))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>updateBulgeDistance();</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>center,<sp/>radius,<sp/>and<sp/>angles<sp/>based<sp/>on<sp/>definition<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::updateDefA()</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>boundsDirty<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(changingDefA<sp/>||<sp/>changingDefB<sp/>||<sp/>!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefB<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>From:<sp/>http://goo.gl/P53dI<sp/>(answer<sp/>by<sp/>Christian<sp/>Blatter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>n<sp/>=<sp/>*m_endPoint<sp/>-<sp/>*m_startPoint;<sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>from<sp/>start-&gt;end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>l<sp/>=<sp/>util()-&gt;length(n);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Chord<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>QPointF(-n.y()/l,<sp/>n.x()/l);<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>unit<sp/>vector,<sp/>rotated<sp/>90deg<sp/>CCW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>m<sp/>=<sp/>(*m_startPoint<sp/>+<sp/>*m_endPoint)/2;<sp/></highlight><highlight class="comment">//<sp/>Midpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>b<sp/>=<sp/>m_bulgeDistance;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>readability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>m_radius<sp/>=<sp/>(b*b<sp/>+<sp/>0.25*l*l)/(2*b);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>newCenter<sp/>=<sp/>m<sp/>+<sp/>(m_radius<sp/>-<sp/>b)*n;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>CS<sp/>=<sp/>*m_startPoint<sp/>-<sp/>newCenter;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>CE<sp/>=<sp/>*m_endPoint<sp/>-<sp/>newCenter;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b==0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_startAngle<sp/>=<sp/>util()-&gt;rad2deg(qAtan2(n.y(),<sp/>n.x()));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_endAngle<sp/>=<sp/>m_startAngle;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_startAngle<sp/>=<sp/>util()-&gt;rad2deg(qAtan2(CS.y(),<sp/>CS.x()));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_endAngle<sp/>=<sp/>util()-&gt;rad2deg(qAtan2(CE.y(),<sp/>CE.x()));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>angles<sp/>are<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>util()-&gt;swap(&amp;m_startAngle,<sp/>&amp;m_endAngle);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m_endAngle<sp/>&lt;<sp/>m_startAngle)<sp/>m_endAngle<sp/>+=<sp/>360;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>startAngleChanged(m_startAngle);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>endAngleChanged(m_endAngle);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeBase::setCenter(newCenter);<sp/></highlight><highlight class="comment">//<sp/>Which<sp/>of<sp/>these<sp/>is<sp/>not<sp/>like<sp/>the<sp/>others....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>radiusChanged(m_radius);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>updateBulgePoint();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefB<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>start<sp/>point,<sp/>end<sp/>point,<sp/>and<sp/>bulge<sp/>distance<sp/>base<sp/>on<sp/>definition<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::updateDefB()</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>boundsDirty<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(changingDefB<sp/>||<sp/>changingDefA<sp/>||<sp/>!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefA<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>a<sp/>=<sp/>util()-&gt;deg2rad(m_startAngle);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>b<sp/>=<sp/>util()-&gt;deg2rad(m_endAngle);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>r<sp/>=<sp/>qAbs(m_radius);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>fairly<sp/>self<sp/>explanatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>CS(r*qCos(a),<sp/>r*qSin(a));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>CE(r*qCos(b),<sp/>r*qSin(b));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_radius<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util()-&gt;swap(&amp;CS,<sp/>&amp;CE);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>m_startPoint-&gt;setPoint(*center()<sp/>+<sp/>CS);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>m_endPoint-&gt;setPoint(*center()<sp/>+<sp/>CE);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>CM<sp/>=<sp/>(CS<sp/>+<sp/>CE)/2;<sp/></highlight><highlight class="comment">//<sp/>Center-&gt;midpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bulgeDistance<sp/>=<sp/>(r<sp/>-<sp/>util()-&gt;length(CM))*util()-&gt;sign(m_radius);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>emit<sp/>startPointChanged();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>emit<sp/>endPointChanged();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/>bulgeDistanceChanged(m_bulgeDistance);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>updateBulgePoint();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>changingDefA<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::updateBulgePoint()</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_util)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>angle<sp/>of<sp/>the<sp/>bulge<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bulgeDistance<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qreal<sp/>theta<sp/>=<sp/>util()-&gt;deg2rad((m_endAngle<sp/>+<sp/>m_startAngle)/2);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bulgePoint-&gt;setPoint(*center()<sp/>+<sp/>qAbs(m_radius)*QPointF(qCos(theta),<sp/>qSin(theta)));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bulgePoint-&gt;setPoint((*m_startPoint<sp/>+<sp/>*m_endPoint)/2);<sp/></highlight><highlight class="comment">//<sp/>Just<sp/>use<sp/>the<sp/>midpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>emit<sp/>bulgePointChanged();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArcBase::updateBulgeDistance()</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(changingDefB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Equation<sp/>of<sp/>line<sp/>from<sp/>http://goo.gl/4kcGo<sp/>(StackOverflow)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>a<sp/>=<sp/>m_startPoint-&gt;y()<sp/>-<sp/>m_endPoint-&gt;y();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>b<sp/>=<sp/>m_endPoint-&gt;x()<sp/>-<sp/>m_startPoint-&gt;x();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>c<sp/>=<sp/>-b*m_startPoint-&gt;y()<sp/>-<sp/>a*m_startPoint-&gt;x();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nearest<sp/>distance<sp/>between<sp/>line<sp/>and<sp/>point<sp/>(mouse,<sp/>in<sp/>this<sp/>case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://goo.gl/UMw8H<sp/>(WikiP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>QPointF<sp/>m<sp/>=<sp/>editor()-&gt;<ref refid="class_editor_base_1a8e6abbe6e9ab6140926b1fcf3ce7ae1f" kindref="member">mouse</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>qreal<sp/>newBulge<sp/>=<sp/>-(a*m.x()<sp/>+<sp/>b*m.y()<sp/>+<sp/>c)<sp/>/<sp/>qSqrt(a*a<sp/>+<sp/>b*b);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>setBulgeDistance(newBulge);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/kitizz/projects/eda/src/arcbase.cpp"/>
  </compounddef>
</doxygen>
